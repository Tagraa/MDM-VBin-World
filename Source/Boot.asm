;***********************************************************************
%include "Include/Boot/Stage-2_Info.asm"
;***********************************************************************
;=======================================================================
; Segment to start reading Stage-2 into right after bootloader
;=======================================================================
STAGE2_LOAD_SEG         equ     STAGE2_ABS_ADDR>>4
;=======================================================================
; Logical Block Address(LBA) Stage2 starts on
; LBA 1 = sector after boot sector
;=======================================================================
STAGE2_LBA_START        equ     1
;=======================================================================
; Logical Block Address(LBA) Stage2 ends at
;=======================================================================
STAGE2_LBA_END          equ     STAGE2_LBA_START + NUM_STAGE2_SECTORS
;=======================================================================
; Number of times to retry on disk error
;=======================================================================
DISK_RETRIES            equ     3
;***********************************************************************
[bits 16]
[ORG 0x7c00]
;***********************************************************************
;=======================================================================
; Include a BPB (1.44MB floppy with FAT12) to be more comaptible
; with USB floppy media
;=======================================================================
;***********************************************************************
%include "Include/Boot/BPB.asm"
;***********************************************************************
Boot_Start:
;-----------------------------------------------------------------------
; DS=SS=ES=0 for stage2 loading
;-----------------------------------------------------------------------
    xor         ax, ax
    mov         ds, ax
;-----------------------------------------------------------------------
; Stack at 0x0000:0x7c00
;-----------------------------------------------------------------------
    mov         ss, ax
    mov         sp, 0x7c00
;-----------------------------------------------------------------------
; Set string instructions to use forward movement
;-----------------------------------------------------------------------
    cld
    mov         si, TestMessage
    call        System.AI
    mov         si, SystemInfoMessage
    call        System.AI
    mov         word [__Wait__], 30
    call        Process.Wait
;-----------------------------------------------------------------------
; Read Stage-2 1 sector at a time until stage2 is completely loaded
;-----------------------------------------------------------------------
Load_Stage2:
;-----------------------------------------------------------------------
; Save boot drive
;-----------------------------------------------------------------------
    mov         [BootDevice], dl
;-----------------------------------------------------------------------
; DI = Current segment to read into
;-----------------------------------------------------------------------
    mov         di, STAGE2_LOAD_SEG
;-----------------------------------------------------------------------
; SI = LBA that stage2 starts at
;-----------------------------------------------------------------------
    mov         si, STAGE2_LBA_START
;-----------------------------------------------------------------------
; Check to see if we are last sector in stage2
;-----------------------------------------------------------------------
    jmp         .Check_For_Last_LBA
;***********************************************************************
.Read_Sector_Loop:
;-----------------------------------------------------------------------
; Set disk retry count
;-----------------------------------------------------------------------
    mov         bp, DISK_RETRIES
;-----------------------------------------------------------------------
; Convert current LBA to CHS
;-----------------------------------------------------------------------
    call        LBA_to_CHS
;-----------------------------------------------------------------------
; Set ES to current segment number to read into
;-----------------------------------------------------------------------
    mov         es, di
;-----------------------------------------------------------------------
; Offset zero in segment
;-----------------------------------------------------------------------
    xor         bx, bx
;***********************************************************************
.Retry:
;-----------------------------------------------------------------------
; Call function 0x02 of int 13h (read sectors)
; AL = 1 = Sectors to read
;-----------------------------------------------------------------------
    mov         ax, 0x0201
;-----------------------------------------------------------------------
; BIOS Disk interrupt call
;-----------------------------------------------------------------------
    int         0x13
;-----------------------------------------------------------------------
; If CF set then disk error
;-----------------------------------------------------------------------
    jc          .Disk_Error
;***********************************************************************
.Success:
;-----------------------------------------------------------------------
; Advance to next 512 byte segment (0x20*16=512)
;-----------------------------------------------------------------------
    add         di, 512>>4
;-----------------------------------------------------------------------
; Next LBA
;-----------------------------------------------------------------------
    inc         si
;***********************************************************************
.Check_For_Last_LBA:
;-----------------------------------------------------------------------
; Have we reached the last stage2 sector?
;-----------------------------------------------------------------------
    cmp         si, STAGE2_LBA_END
;-----------------------------------------------------------------------
; If we haven't then read next sector
;-----------------------------------------------------------------------
    jl          .Read_Sector_Loop
;***********************************************************************
.Stage2_Loaded:
;-----------------------------------------------------------------------
; Set up the segments appropriate for Stage2 to run
;-----------------------------------------------------------------------
    mov         ax, STAGE2_RUN_SEG
    mov         ds, ax
    mov         es, ax
;-----------------------------------------------------------------------
; FAR JMP to the Stage-2 entry point at physical address 0x07e00
;-----------------------------------------------------------------------
    jmp         STAGE2_RUN_SEG:STAGE2_RUN_OFS
;***********************************************************************
.Disk_Error:
;-----------------------------------------------------------------------
; Int13h/AH=0 is drive reset
;-----------------------------------------------------------------------
    xor         ah, ah
    int         0x13
;-----------------------------------------------------------------------
; Decrease retry count
;-----------------------------------------------------------------------
    dec         bp
;-----------------------------------------------------------------------
; If retry count not exceeded then try again
;-----------------------------------------------------------------------
    jge         .Retry
;***********************************************************************
Error_End:
;-----------------------------------------------------------------------
; Unrecoverable error; print drive error; enter infinite loop
; Display disk error message
;-----------------------------------------------------------------------
    mov         si, DiskErrorMessage
    call        Print_String
    cli
.Error_Loop:
    hlt
    jmp         .Error_Loop
;***********************************************************************
;-----------------------------------------------------------------------
; Function: Print_String
;           Display a string to the console on display page 0
;
; Inputs:   SI = Offset of address to print
; Clobbers: AX, BX, SI
;-----------------------------------------------------------------------
Print_String:
;-----------------------------------------------------------------------
; BIOS tty Print
;-----------------------------------------------------------------------
    mov         ah, 0x0e
;-----------------------------------------------------------------------
; Set display page to 0 (BL)
;-----------------------------------------------------------------------
    xor         bx, bx
    jmp         .Getch
.Repeat:
;-----------------------------------------------------------------------
; Print character
;-----------------------------------------------------------------------
    int         0x10
.Getch:
;-----------------------------------------------------------------------
; Get character from string
;-----------------------------------------------------------------------
    lodsb
;-----------------------------------------------------------------------
; Have we reached end of string?
;-----------------------------------------------------------------------
    test        al, al
;-----------------------------------------------------------------------
;     if not process next character
;-----------------------------------------------------------------------
    jnz         .Repeat
.End:
    ret
;***********************************************************************
;-----------------------------------------------------------------------
;    Function: LBA_to_CHS
; Description: Translate Logical block address to CHS (Cylinder, Head, Sector).
;              Works for all valid FAT12 compatible disk geometries.
;
;   Resources: http://www.ctyme.com/intr/rb-0607.htm
;              https://en.wikipedia.org/wiki/Logical_block_addressing#CHS_conversion
;              https://stackoverflow.com/q/45434899/3857942
;              Sector    = (LBA mod SPT) + 1
;              Head      = (LBA / SPT) mod HEADS
;              Cylinder  = (LBA / SPT) / HEADS
;
;      Inputs: SI = LBA
;     Outputs: DL = Boot Drive Number
;              DH = Head
;              CH = Cylinder (lower 8 bits of 10-bit cylinder)
;              CL = Sector/Cylinder
;                   Upper 2 bits of 10-bit Cylinders in upper 2 bits of CL
;                   Sector in lower 6 bits of CL
;
;       Notes: Output registers match expectation of Int 13h/AH=2 inputs
;-----------------------------------------------------------------------
LBA_to_CHS:
;-----------------------------------------------------------------------
; Preserve AX
;-----------------------------------------------------------------------
    push        ax
;-----------------------------------------------------------------------
; Copy LBA to AX
;-----------------------------------------------------------------------
    mov         ax, si
;-----------------------------------------------------------------------
; Upper 16-bit of 32-bit value set to 0 for DIV
;-----------------------------------------------------------------------
    xor         dx, dx
;-----------------------------------------------------------------------
; 32-bit by 16-bit DIV : LBA / SPT
;-----------------------------------------------------------------------
    div         word [sectorsPerTrack]
;-----------------------------------------------------------------------
; CL = S = LBA mod SPT
;-----------------------------------------------------------------------
    mov         cl, dl
;-----------------------------------------------------------------------
; CL = S = (LBA mod SPT) + 1
;-----------------------------------------------------------------------
    inc         cl
;-----------------------------------------------------------------------
; Upper 16-bit of 32-bit value set to 0 for DIV
;-----------------------------------------------------------------------
    xor         dx, dx
;-----------------------------------------------------------------------
; 32-bit by 16-bit DIV : (LBA / SPT) / HEADS
;-----------------------------------------------------------------------
    div         word [numHeads]
;-----------------------------------------------------------------------
; DH = H = (LBA / SPT) mod HEADS
;-----------------------------------------------------------------------
    mov         dh, dl
;-----------------------------------------------------------------------
; boot device, not necessary to set but convenient
;-----------------------------------------------------------------------
    mov         dl, [BootDevice]
;-----------------------------------------------------------------------
; CH = C(lower 8 bits) = (LBA / SPT) / HEADS
;-----------------------------------------------------------------------
    mov         ch, al
;-----------------------------------------------------------------------
; Store upper 2 bits of 10-bit Cylinder into
;-----------------------------------------------------------------------
    shl         ah, 6
;-----------------------------------------------------------------------
;     upper 2 bits of Sector (CL)
;-----------------------------------------------------------------------
    or          cl, ah
;-----------------------------------------------------------------------
; Restore scratch registers
;-----------------------------------------------------------------------
    pop         ax
    ret
;***********************************************************************
Process.Wait:
        push    ax
        push    cx
        push    dx
        mov     ah, 86h
        mov     cx, word [__Wait__]
        mov     dx, 8480h
        int     15h
        pop     dx
        pop     cx
        pop     ax
        ret
System.AI:
        push    si
        mov     word [__Wait__], 15
        call    Process.Wait
        mov     si, __AI__
        call    Print_String
        pop     si
        call    Print_String
        mov     si, __New_Line__
        call    Print_String
        ret
;***********************************************************************
;-----------------------------------------------------------------------
; Uncomment these lines if not using a BPB (via bpb.inc)
; 1.44MB Floppy has 2 heads & 18 sector per track
;-----------------------------------------------------------------------
; NumHeads:             dw      2
; SectorsPerTrack:      dw      18
;.......................................................................
BootDevice:             db      0x00
DiskErrorMessage:       db      "Unrecoverable disk error!", 0
TestMessage:            db      "Hi! :)", 0
SystemInfoMessage:      db      "Opening Golden Gate", 0
__AI__:                 db      "System_AI> ", 0
__New_Line__:           db      "", 10, 13, 0
__Wait__:               dw      0
;.......................................................................
;***********************************************************************
;-----------------------------------------------------------------------
; Pad boot sector to 510 bytes and add 2 byte boot signature for
; 512 total bytes
;-----------------------------------------------------------------------
TIMES 510-($-$$)        db      0
                        dw      0xaa55
;***********************************************************************
;-----------------------------------------------------------------------
; Beginning of stage2. This is at 0x7E00 and will allow your stage2
; to be 32.5KiB before running into problems. DL will be set to
; the drive number originally passed to us by the BIOS.
;-----------------------------------------------------------------------
NUM_STAGE2_SECTORS      equ     (Stage2_End - Stage2_Start + 511) / 512
                                ; Number of 512 byte sectors stage2 uses.
;***********************************************************************
Stage2_Start:
    ; Insert stage2 binary here. It is done this way since we
    ; can determine the size(and number of sectors) to load since
    ;     Size = stage2_end-stage2_start
    incbin "../VBin/Golden_Gate_Intercontinental.vbin"
;-----------------------------------------------------------------------
; End of stage2. Make sure this label is LAST in this file!
;-----------------------------------------------------------------------
Stage2_End:
;***********************************************************************
;//EOF
